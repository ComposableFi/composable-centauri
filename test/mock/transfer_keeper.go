// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/strangelove-ventures/packet-forward-middleware/v7/router/types (interfaces: TransferKeeper)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	tmbytes "github.com/cometbft/cometbft/libs/bytes"
	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/ibc-go/v7/modules/apps/transfer/types"
	gomock "github.com/golang/mock/gomock"
	transfertypes "github.com/cosmos/ibc-go/v7/modules/apps/transfer/types"
)

// MockTransferKeeper is a mock of TransferKeeper interface.
type MockTransferKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockTransferKeeperMockRecorder
}

// MockTransferKeeperMockRecorder is the mock recorder for MockTransferKeeper.
type MockTransferKeeperMockRecorder struct {
	mock *MockTransferKeeper
}

// NewMockTransferKeeper creates a new mock instance.
func NewMockTransferKeeper(ctrl *gomock.Controller) *MockTransferKeeper {
	mock := &MockTransferKeeper{ctrl: ctrl}
	mock.recorder = &MockTransferKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferKeeper) EXPECT() *MockTransferKeeperMockRecorder {
	return m.recorder
}

// DenomPathFromHash mocks base method.
func (m *MockTransferKeeper) DenomPathFromHash(arg0 types.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenomPathFromHash", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenomPathFromHash indicates an expected call of DenomPathFromHash.
func (mr *MockTransferKeeperMockRecorder) DenomPathFromHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenomPathFromHash", reflect.TypeOf((*MockTransferKeeper)(nil).DenomPathFromHash), arg0, arg1)
}

func (m *MockTransferKeeper) GetReceiveEnabled(arg0 types.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiveEnabled", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (mr *MockTransferKeeperMockRecorder) GetReceiveEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiveEnabled", reflect.TypeOf((*MockTransferKeeper)(nil).GetReceiveEnabled), arg0)
}

// Transfer mocks base method.
func (m *MockTransferKeeper) Transfer(arg0 context.Context, arg1 *types0.MsgTransfer) (*types0.MsgTransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgTransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTransferKeeperMockRecorder) Transfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTransferKeeper)(nil).Transfer), arg0, arg1)
}

// HasDenomTrace mocks base method.
func (m *MockTransferKeeper) HasDenomTrace(arg0 types.Context, arg1 tmbytes.HexBytes) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDenomTrace", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasDenomTrace indicates an expected call of Transfer.
func (mr *MockTransferKeeperMockRecorder) HasDenomTrace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDenomTrace", reflect.TypeOf((*MockTransferKeeper)(nil).HasDenomTrace), arg0, arg1)
}

// HasDenomTrace mocks base method.
func (m *MockTransferKeeper) SetDenomTrace(arg0 types.Context, arg1 transfertypes.DenomTrace) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDenomTrace", arg0, arg1)
	return 
}

// HasDenomTrace indicates an expected call of Transfer.
func (mr *MockTransferKeeperMockRecorder) SetDenomTrace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDenomTrace", reflect.TypeOf((*MockTransferKeeper)(nil).SetDenomTrace), arg0, arg1)
}