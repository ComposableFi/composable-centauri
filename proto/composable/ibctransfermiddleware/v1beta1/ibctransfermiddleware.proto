syntax = "proto3";
package composable.ibctransfermiddleware.v1beta1;

option go_package = "x/ibctransfermiddleware/types";

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";


// MsgDelegate defines a SDK message for performing a delegation of coins
// from a delegator to a validator.
message Delegation {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name)           = "cosmos-sdk/MsgDelegate";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount            = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// BeginRedelegate defines a SDK message for performing a begin redelegation of coins
// from a delegator to a validator.
message BeginRedelegate{
    option (cosmos.msg.v1.signer) = "delegator_address";
    option (amino.name)           = "cosmos-sdk/MsgBeginRedelegate";

    option (gogoproto.equal)           = false;
    option (gogoproto.goproto_getters) = false;

    string                   delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    string                   validator_src_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    string                   validator_dst_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    cosmos.base.v1beta1.Coin amount            = 4 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgDelegate defines a SDK message for performing a delegation of coins
// from a delegator to a validator.
message Undelegate {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name)           = "cosmos-sdk/MsgUndelegate";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount            = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgDelegate defines a SDK message for performing a delegation of coins
// from a delegator to a validator.
message CancelUnbondingDelegation {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name)           = "cosmos-sdk/MsgCancelUnbondingDelegation";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount            = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  int64 creation_height = 4;
}



// Params holds parameters for the ibctransfermiddleware module.
message Params {
  repeated ChannelFee channel_fees = 1;
}

message ChannelFee{
  string channel  = 1;
  repeated CoinItem allowed_tokens = 2;
  string fee_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message CoinItem{
  cosmos.base.v1beta1.Coin min_fee = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  int64 percentage = 2;
}

