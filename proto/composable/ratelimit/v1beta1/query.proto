syntax = "proto3";
package composable.ratelimit.v1beta1;

import "composable/ratelimit/v1beta1/ratelimit.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "x/ratelimit/types";

// Query defines the gRPC querier service.
service Query {
  rpc AllRateLimits(QueryAllRateLimitsRequest)
      returns (QueryAllRateLimitsResponse) {
    option (google.api.http).get = "/composable/ratelimit/ratelimits";
  }
  rpc RateLimit(QueryRateLimitRequest) returns (QueryRateLimitResponse) {
    option (google.api.http).get =
        "/composable/ratelimit/ratelimit/{ChannelID}/by_denom";
  }
  rpc RateLimitsByChainID(QueryRateLimitsByChainIDRequest)
      returns (QueryRateLimitsByChainIDResponse) {
    option (google.api.http).get =
        "/composable/ratelimit/ratelimits/{chain_id}";
  }
  rpc RateLimitsByChannelID(QueryRateLimitsByChannelIDRequest)
      returns (QueryRateLimitsByChannelIDResponse) {
    option (google.api.http).get =
        "/composable/ratelimit/ratelimits/{ChannelID}";
  }
  rpc AllWhitelistedAddresses(QueryAllWhitelistedAddressesRequest)
      returns (QueryAllWhitelistedAddressesResponse) {
    option (google.api.http).get =
        "/composable/ratelimit/whitelisted_addresses";
  }
}

message QueryAllRateLimitsRequest {}
message QueryAllRateLimitsResponse {
  repeated RateLimit rate_limits = 1 [ (gogoproto.nullable) = false ];
}

message QueryRateLimitRequest {
  string denom = 1;
  string ChannelID = 2 [ (gogoproto.customname) = "ChannelID" ];
}
message QueryRateLimitResponse { RateLimit rate_limit = 1; }

message QueryRateLimitsByChainIDRequest { string chain_id = 1; }
message QueryRateLimitsByChainIDResponse {
  repeated RateLimit rate_limits = 1 [ (gogoproto.nullable) = false ];
}

message QueryRateLimitsByChannelIDRequest { string ChannelID = 1 [ (gogoproto.customname) = "ChannelID" ]; }
message QueryRateLimitsByChannelIDResponse {
  repeated RateLimit rate_limits = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllWhitelistedAddressesRequest {}
message QueryAllWhitelistedAddressesResponse {
  repeated WhitelistedAddressPair address_pairs = 1
      [ (gogoproto.nullable) = false ];
}