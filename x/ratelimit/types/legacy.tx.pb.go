// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: centauri/ratelimit/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddRateLimitLegacy struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	// denom of the token that is limited
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// The channel that is limited when transferr ICS 20 packet of denom
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Max rate limit send
	MaxPercentSend github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=max_percent_send,json=maxPercentSend,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_percent_send"`
	// Max rate limit receive
	MaxPercentRecv github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=max_percent_recv,json=maxPercentRecv,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_percent_recv"`
	// Min amount of rate limit (allow transfer max(min-amout, rate-limit))
	MinRateLimitAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=min_rate_limit_amount,json=minRateLimitAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_rate_limit_amount"`
	// Duration of rate limit. The rate limit will reset when reach the duration.
	DurationHours uint64 `protobuf:"varint,7,opt,name=duration_hours,json=durationHours,proto3" json:"duration_hours,omitempty"`
}

func (m *MsgAddRateLimitLegacy) Reset()         { *m = MsgAddRateLimitLegacy{} }
func (m *MsgAddRateLimitLegacy) String() string { return proto.CompactTextString(m) }
func (*MsgAddRateLimitLegacy) ProtoMessage()    {}
func (*MsgAddRateLimitLegacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b20911f56917b5f, []int{0}
}
func (m *MsgAddRateLimitLegacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRateLimitLegacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRateLimitLegacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRateLimitLegacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRateLimitLegacy.Merge(m, src)
}
func (m *MsgAddRateLimitLegacy) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRateLimitLegacy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRateLimitLegacy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRateLimitLegacy proto.InternalMessageInfo

func (m *MsgAddRateLimitLegacy) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgAddRateLimitLegacy) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgAddRateLimitLegacy) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgAddRateLimitLegacy) GetDurationHours() uint64 {
	if m != nil {
		return m.DurationHours
	}
	return 0
}

type MsgAddRateLimitResponseLegacy struct {
}

func (m *MsgAddRateLimitResponseLegacy) Reset()         { *m = MsgAddRateLimitResponseLegacy{} }
func (m *MsgAddRateLimitResponseLegacy) String() string { return proto.CompactTextString(m) }
func (*MsgAddRateLimitResponseLegacy) ProtoMessage()    {}
func (*MsgAddRateLimitResponseLegacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b20911f56917b5f, []int{1}
}
func (m *MsgAddRateLimitResponseLegacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRateLimitResponseLegacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRateLimitResponseLegacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRateLimitResponseLegacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRateLimitResponseLegacy.Merge(m, src)
}
func (m *MsgAddRateLimitResponseLegacy) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRateLimitResponseLegacy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRateLimitResponseLegacy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRateLimitResponseLegacy proto.InternalMessageInfo

type MsgUpdateRateLimitLegacy struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority          string                                 `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	Denom              string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ChannelId          string                                 `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MaxPercentSend     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=max_percent_send,json=maxPercentSend,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_percent_send"`
	MaxPercentRecv     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=max_percent_recv,json=maxPercentRecv,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_percent_recv"`
	MinRateLimitAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=min_rate_limit_amount,json=minRateLimitAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_rate_limit_amount"`
	DurationHours      uint64                                 `protobuf:"varint,7,opt,name=duration_hours,json=durationHours,proto3" json:"duration_hours,omitempty"`
}

func (m *MsgUpdateRateLimitLegacy) Reset()         { *m = MsgUpdateRateLimitLegacy{} }
func (m *MsgUpdateRateLimitLegacy) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRateLimitLegacy) ProtoMessage()    {}
func (*MsgUpdateRateLimitLegacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b20911f56917b5f, []int{2}
}
func (m *MsgUpdateRateLimitLegacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRateLimitLegacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRateLimitLegacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRateLimitLegacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRateLimitLegacy.Merge(m, src)
}
func (m *MsgUpdateRateLimitLegacy) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRateLimitLegacy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRateLimitLegacy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRateLimitLegacy proto.InternalMessageInfo

func (m *MsgUpdateRateLimitLegacy) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateRateLimitLegacy) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgUpdateRateLimitLegacy) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgUpdateRateLimitLegacy) GetDurationHours() uint64 {
	if m != nil {
		return m.DurationHours
	}
	return 0
}

type MsgUpdateRateLimitResponseLegacy struct {
}

func (m *MsgUpdateRateLimitResponseLegacy) Reset()         { *m = MsgUpdateRateLimitResponseLegacy{} }
func (m *MsgUpdateRateLimitResponseLegacy) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRateLimitResponseLegacy) ProtoMessage()    {}
func (*MsgUpdateRateLimitResponseLegacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b20911f56917b5f, []int{3}
}
func (m *MsgUpdateRateLimitResponseLegacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRateLimitResponseLegacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRateLimitResponseLegacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRateLimitResponseLegacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRateLimitResponseLegacy.Merge(m, src)
}
func (m *MsgUpdateRateLimitResponseLegacy) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRateLimitResponseLegacy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRateLimitResponseLegacy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRateLimitResponseLegacy proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddRateLimitLegacy)(nil), "centauri.ratelimit.v1beta1.MsgAddRateLimit")
	proto.RegisterType((*MsgAddRateLimitResponseLegacy)(nil), "centauri.ratelimit.v1beta1.MsgAddRateLimitResponse")
	proto.RegisterType((*MsgUpdateRateLimitLegacy)(nil), "centauri.ratelimit.v1beta1.MsgUpdateRateLimit")
	proto.RegisterType((*MsgUpdateRateLimitResponseLegacy)(nil), "centauri.ratelimit.v1beta1.MsgUpdateRateLimitResponse")
}

func init() {
	proto.RegisterFile("centauri/ratelimit/v1beta1/tx.proto", fileDescriptor_6b20911f56917b5f)
}

var fileDescriptor_6b20911f56917b5f = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0xc1, 0x8b, 0xd3, 0x4e,
	0x14, 0xc7, 0x9b, 0xed, 0xee, 0xfe, 0xe8, 0xc0, 0xaf, 0x2e, 0x43, 0xa5, 0x31, 0x68, 0xba, 0x44,
	0x94, 0x45, 0x31, 0x43, 0xbb, 0xe0, 0x61, 0x6f, 0xdd, 0x93, 0x0b, 0x16, 0x24, 0x2a, 0x88, 0x97,
	0x30, 0xcd, 0x8c, 0xe9, 0x60, 0x67, 0x26, 0xcc, 0x4c, 0x4a, 0x7a, 0x54, 0xff, 0x01, 0xff, 0x14,
	0xff, 0x8c, 0x82, 0x97, 0x3d, 0x8a, 0x87, 0x22, 0xed, 0xc1, 0xbb, 0x7f, 0x81, 0x24, 0x69, 0x5a,
	0x69, 0x11, 0x59, 0x3d, 0x09, 0x9e, 0x26, 0x79, 0xef, 0x9b, 0xef, 0xbc, 0xf7, 0x3e, 0xe1, 0x81,
	0xdb, 0x11, 0x15, 0x06, 0xa7, 0x8a, 0x21, 0x85, 0x0d, 0x1d, 0x33, 0xce, 0x0c, 0x9a, 0x74, 0x87,
	0xd4, 0xe0, 0x2e, 0x32, 0x99, 0x9f, 0x28, 0x69, 0x24, 0x74, 0x2a, 0x91, 0xbf, 0x16, 0xf9, 0x2b,
	0x91, 0xd3, 0x8a, 0x65, 0x2c, 0x0b, 0x19, 0xca, 0x9f, 0xca, 0x2f, 0x9c, 0x76, 0x24, 0x35, 0x97,
	0x1a, 0x71, 0x1d, 0xa3, 0x49, 0x37, 0x3f, 0xca, 0x84, 0x37, 0xab, 0x83, 0x6b, 0x03, 0x1d, 0xf7,
	0x09, 0x09, 0xb0, 0xa1, 0x8f, 0x73, 0x2b, 0xd8, 0x03, 0x0d, 0x9c, 0x9a, 0x91, 0x54, 0xcc, 0x4c,
	0x6d, 0xeb, 0xd8, 0x3a, 0x69, 0x9c, 0xb7, 0xbe, 0xcd, 0x3b, 0x47, 0x53, 0xcc, 0xc7, 0x67, 0xde,
	0x3a, 0xe5, 0x05, 0x1b, 0x19, 0x6c, 0x81, 0x03, 0x42, 0x85, 0xe4, 0xf6, 0x5e, 0xae, 0x0f, 0xca,
	0x17, 0x78, 0x0b, 0x80, 0x68, 0x84, 0x85, 0xa0, 0xe3, 0x90, 0x11, 0xbb, 0x5e, 0xa4, 0x1a, 0xab,
	0xc8, 0x05, 0x81, 0x2f, 0xc0, 0x11, 0xc7, 0x59, 0x98, 0x50, 0x95, 0x37, 0x14, 0x6a, 0x2a, 0x88,
	0xbd, 0x5f, 0xdc, 0xe7, 0xcf, 0xe6, 0x9d, 0xda, 0xe7, 0x79, 0xe7, 0x6e, 0xcc, 0xcc, 0x28, 0x1d,
	0xfa, 0x91, 0xe4, 0x68, 0xd5, 0x42, 0x79, 0x3c, 0xd0, 0xe4, 0x35, 0x32, 0xd3, 0x84, 0x6a, 0xff,
	0x42, 0x98, 0xa0, 0xc9, 0x71, 0xf6, 0xa4, 0xb4, 0x79, 0x4a, 0xc5, 0x8e, 0xb3, 0xa2, 0xd1, 0xc4,
	0x3e, 0xf8, 0x53, 0xe7, 0x80, 0x46, 0x13, 0x88, 0xc1, 0x75, 0xce, 0x44, 0x98, 0x0f, 0x3e, 0x2c,
	0x26, 0x1f, 0x62, 0x2e, 0x53, 0x61, 0xec, 0xc3, 0xdf, 0xb2, 0x87, 0x9c, 0x89, 0xf5, 0xe4, 0xfb,
	0x85, 0x13, 0xbc, 0x03, 0x9a, 0x24, 0x55, 0xd8, 0x30, 0x29, 0xc2, 0x91, 0x4c, 0x95, 0xb6, 0xff,
	0x3b, 0xb6, 0x4e, 0xf6, 0x83, 0xff, 0xab, 0xe8, 0xa3, 0x3c, 0x78, 0xd6, 0x7c, 0xfb, 0xf5, 0xc3,
	0xbd, 0x0d, 0x02, 0xef, 0x06, 0x68, 0x6f, 0x91, 0x0c, 0xa8, 0x4e, 0xa4, 0xd0, 0xd4, 0xfb, 0x58,
	0x07, 0x70, 0xa0, 0xe3, 0xe7, 0x09, 0xc1, 0x86, 0xfe, 0x03, 0xfd, 0x97, 0x83, 0xbe, 0x09, 0x9c,
	0x5d, 0x98, 0x15, 0xeb, 0xde, 0xbb, 0x3d, 0x50, 0x1f, 0xe8, 0x18, 0x66, 0xa0, 0xd5, 0x27, 0xe4,
	0x99, 0xc2, 0x42, 0xbf, 0xa2, 0x6a, 0x03, 0xfd, 0xbe, 0xff, 0xf3, 0xed, 0xe1, 0x6f, 0xfd, 0x40,
	0xce, 0xe9, 0x15, 0xc4, 0x55, 0x05, 0xf0, 0x8d, 0x05, 0xda, 0x65, 0x75, 0xbb, 0xb7, 0xfb, 0xbf,
	0x30, 0xdc, 0xea, 0xca, 0x79, 0x78, 0x35, 0x7d, 0x55, 0xc3, 0x79, 0x6f, 0xb6, 0x70, 0xad, 0xcb,
	0x85, 0x6b, 0x7d, 0x59, 0xb8, 0xd6, 0xfb, 0xa5, 0x5b, 0xbb, 0x5c, 0xba, 0xb5, 0x4f, 0x4b, 0xb7,
	0xf6, 0xd2, 0xce, 0x7e, 0x58, 0xad, 0x05, 0x1f, 0x34, 0xa6, 0x31, 0x8e, 0xa6, 0xc3, 0xc3, 0x62,
	0x25, 0x9e, 0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xa7, 0xb1, 0xd2, 0x84, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClientLegacy interface {
	AddTransferRateLimit(ctx context.Context, in *MsgAddRateLimit, opts ...grpc.CallOption) (*MsgAddRateLimitResponse, error)
	UpdateTransferRateLimit(ctx context.Context, in *MsgUpdateRateLimit, opts ...grpc.CallOption) (*MsgUpdateRateLimitResponse, error)
}

type msgClientLegacy struct {
	cc grpc1.ClientConn
}

func NewMsgClientLegacy(cc grpc1.ClientConn) MsgClientLegacy {
	return &msgClientLegacy{cc}
}

func (c *msgClientLegacy) AddTransferRateLimit(ctx context.Context, in *MsgAddRateLimit, opts ...grpc.CallOption) (*MsgAddRateLimitResponse, error) {
	out := new(MsgAddRateLimitResponse)
	err := c.cc.Invoke(ctx, "/centauri.ratelimit.v1beta1.Msg/AddTransferRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClientLegacy) UpdateTransferRateLimit(ctx context.Context, in *MsgUpdateRateLimit, opts ...grpc.CallOption) (*MsgUpdateRateLimitResponse, error) {
	out := new(MsgUpdateRateLimitResponse)
	err := c.cc.Invoke(ctx, "/centauri.ratelimit.v1beta1.Msg/UpdateTransferRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServerLegacy interface {
	AddTransferRateLimit(context.Context, *MsgAddRateLimitLegacy) (*MsgAddRateLimitResponseLegacy, error)
	UpdateTransferRateLimit(context.Context, *MsgUpdateRateLimitLegacy) (*MsgUpdateRateLimitResponseLegacy, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServerLegacy struct {
}

func (*UnimplementedMsgServerLegacy) AddTransferRateLimit(ctx context.Context, req *MsgAddRateLimit) (*MsgAddRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransferRateLimit not implemented")
}
func (*UnimplementedMsgServerLegacy) UpdateTransferRateLimit(ctx context.Context, req *MsgUpdateRateLimit) (*MsgUpdateRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransferRateLimit not implemented")
}

func RegisterMsgServerLegacy(s grpc1.Server, srv MsgServerLegacy) {
	s.RegisterService(&Msg_serviceDesc, srv)
}

func _Msg_AddTransferRateLimitLegacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRateLimitLegacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServerLegacy).AddTransferRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centauri.ratelimit.v1beta1.Msg/AddTransferRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServerLegacy).AddTransferRateLimit(ctx, req.(*MsgAddRateLimitLegacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTransferRateLimitLegacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRateLimitLegacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServerLegacy).UpdateTransferRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centauri.ratelimit.v1beta1.Msg/UpdateTransferRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServerLegacy).UpdateTransferRateLimit(ctx, req.(*MsgUpdateRateLimitLegacy))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "centauri.ratelimit.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTransferRateLimit",
			Handler:    _Msg_AddTransferRateLimit_Handler,
		},
		{
			MethodName: "UpdateTransferRateLimit",
			Handler:    _Msg_UpdateTransferRateLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "centauri/ratelimit/v1beta1/tx.proto",
}

func (m *MsgAddRateLimitLegacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRateLimitLegacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRateLimitLegacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DurationHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DurationHours))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.MinRateLimitAmount.Size()
		i -= size
		if _, err := m.MinRateLimitAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MaxPercentRecv.Size()
		i -= size
		if _, err := m.MaxPercentRecv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxPercentSend.Size()
		i -= size
		if _, err := m.MaxPercentSend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRateLimitResponseLegacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRateLimitResponseLegacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRateLimitResponseLegacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRateLimitLegacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRateLimitLegacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRateLimitLegacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DurationHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DurationHours))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.MinRateLimitAmount.Size()
		i -= size
		if _, err := m.MinRateLimitAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MaxPercentRecv.Size()
		i -= size
		if _, err := m.MaxPercentRecv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxPercentSend.Size()
		i -= size
		if _, err := m.MaxPercentSend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRateLimitResponseLegacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRateLimitResponseLegacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRateLimitResponseLegacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddRateLimitLegacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxPercentSend.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxPercentRecv.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinRateLimitAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DurationHours != 0 {
		n += 1 + sovTx(uint64(m.DurationHours))
	}
	return n
}

func (m *MsgAddRateLimitResponseLegacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRateLimitLegacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxPercentSend.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxPercentRecv.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinRateLimitAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DurationHours != 0 {
		n += 1 + sovTx(uint64(m.DurationHours))
	}
	return n
}

func (m *MsgUpdateRateLimitResponseLegacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddRateLimitLegacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentSend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentSend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentRecv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentRecv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRateLimitAmount", wireType)
			}
			m.DurationHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationHours", wireType)
			}
			m.DurationHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRateLimitResponseLegacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRateLimitLegacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentSend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentSend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentRecv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentRecv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRateLimitAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinRateLimitAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationHours", wireType)
			}
			m.DurationHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRateLimitResponseLegacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
