// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: composable/txboundary/v1beta1/boundary.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Boundary defines the number of tx limit and block per tx generation time
type Boundary struct {
	TxLimit             uint64 `protobuf:"varint,1,opt,name=tx_limit,json=txLimit,proto3" json:"tx_limit,omitempty"`
	BlocksPerGeneration uint64 `protobuf:"varint,2,opt,name=blocks_per_generation,json=blocksPerGeneration,proto3" json:"blocks_per_generation,omitempty"`
}

func (m *Boundary) Reset()         { *m = Boundary{} }
func (m *Boundary) String() string { return proto.CompactTextString(m) }
func (*Boundary) ProtoMessage()    {}
func (*Boundary) Descriptor() ([]byte, []int) {
	return fileDescriptor_e14e1db4aab5f12b, []int{0}
}
func (m *Boundary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Boundary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Boundary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Boundary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Boundary.Merge(m, src)
}
func (m *Boundary) XXX_Size() int {
	return m.Size()
}
func (m *Boundary) XXX_DiscardUnknown() {
	xxx_messageInfo_Boundary.DiscardUnknown(m)
}

var xxx_messageInfo_Boundary proto.InternalMessageInfo

func (m *Boundary) GetTxLimit() uint64 {
	if m != nil {
		return m.TxLimit
	}
	return 0
}

func (m *Boundary) GetBlocksPerGeneration() uint64 {
	if m != nil {
		return m.BlocksPerGeneration
	}
	return 0
}

// Boundary defines the number of delegate and redelegate per Addr
type LimitPerAddr struct {
	DelegateCount     uint64 `protobuf:"varint,1,opt,name=delegate_count,json=delegateCount,proto3" json:"delegate_count,omitempty"`
	ReledegateCount   uint64 `protobuf:"varint,2,opt,name=reledegate_count,json=reledegateCount,proto3" json:"reledegate_count,omitempty"`
	LatestUpdateBlock int64  `protobuf:"varint,3,opt,name=latest_update_block,json=latestUpdateBlock,proto3" json:"latest_update_block,omitempty"`
}

func (m *LimitPerAddr) Reset()         { *m = LimitPerAddr{} }
func (m *LimitPerAddr) String() string { return proto.CompactTextString(m) }
func (*LimitPerAddr) ProtoMessage()    {}
func (*LimitPerAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_e14e1db4aab5f12b, []int{1}
}
func (m *LimitPerAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitPerAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitPerAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitPerAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitPerAddr.Merge(m, src)
}
func (m *LimitPerAddr) XXX_Size() int {
	return m.Size()
}
func (m *LimitPerAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitPerAddr.DiscardUnknown(m)
}

var xxx_messageInfo_LimitPerAddr proto.InternalMessageInfo

func (m *LimitPerAddr) GetDelegateCount() uint64 {
	if m != nil {
		return m.DelegateCount
	}
	return 0
}

func (m *LimitPerAddr) GetReledegateCount() uint64 {
	if m != nil {
		return m.ReledegateCount
	}
	return 0
}

func (m *LimitPerAddr) GetLatestUpdateBlock() int64 {
	if m != nil {
		return m.LatestUpdateBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*Boundary)(nil), "composable.txboundary.v1beta1.Boundary")
	proto.RegisterType((*LimitPerAddr)(nil), "composable.txboundary.v1beta1.LimitPerAddr")
}

func init() {
	proto.RegisterFile("composable/txboundary/v1beta1/boundary.proto", fileDescriptor_e14e1db4aab5f12b)
}

var fileDescriptor_e14e1db4aab5f12b = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcb, 0x4a, 0x03, 0x31,
	0x14, 0x86, 0x1b, 0x2b, 0x5a, 0x82, 0xd7, 0xa9, 0x42, 0x2d, 0x18, 0x4b, 0x41, 0xa8, 0x60, 0x27,
	0x54, 0x9f, 0xc0, 0xba, 0x70, 0xe3, 0xa2, 0x14, 0x5c, 0xe8, 0x66, 0xc8, 0x34, 0xc7, 0x61, 0x30,
	0x33, 0x19, 0x32, 0x67, 0x64, 0xfa, 0x16, 0x7d, 0x2c, 0x97, 0x5d, 0xba, 0x94, 0xf6, 0x45, 0x64,
	0x92, 0x5e, 0xc4, 0x5d, 0xce, 0xff, 0x7d, 0x87, 0x3f, 0x24, 0xf4, 0x76, 0xa2, 0x93, 0x4c, 0xe7,
	0x22, 0x54, 0xc0, 0xb1, 0x0c, 0x75, 0x91, 0x4a, 0x61, 0xa6, 0xfc, 0x73, 0x10, 0x02, 0x8a, 0x01,
	0x5f, 0x07, 0x7e, 0x66, 0x34, 0x6a, 0xef, 0x72, 0x6b, 0xfb, 0x5b, 0xdb, 0x5f, 0xd9, 0xed, 0xb3,
	0x48, 0x47, 0xda, 0x9a, 0xbc, 0x3a, 0xb9, 0xa5, 0x36, 0x8b, 0xb4, 0x8e, 0x14, 0x70, 0x3b, 0x85,
	0xc5, 0x3b, 0x97, 0x85, 0x11, 0x18, 0xeb, 0x74, 0xc5, 0xaf, 0xfe, 0x73, 0x8c, 0x13, 0xc8, 0x51,
	0x24, 0x99, 0x13, 0xba, 0xaf, 0xb4, 0x31, 0x5c, 0x55, 0x79, 0x17, 0xb4, 0x81, 0x65, 0xa0, 0xe2,
	0x24, 0xc6, 0x16, 0xe9, 0x90, 0xde, 0xee, 0x78, 0x1f, 0xcb, 0xe7, 0x6a, 0xf4, 0xee, 0xe8, 0x79,
	0xa8, 0xf4, 0xe4, 0x23, 0x0f, 0x32, 0x30, 0x41, 0x04, 0x29, 0xb8, 0x9a, 0xd6, 0x8e, 0xf5, 0x9a,
	0x0e, 0x8e, 0xc0, 0x3c, 0x6d, 0x50, 0x77, 0x46, 0xe8, 0x81, 0xdd, 0x1e, 0x81, 0x79, 0x90, 0xd2,
	0x78, 0xd7, 0xf4, 0x48, 0x82, 0x82, 0x48, 0x20, 0x04, 0x13, 0x5d, 0xa4, 0xeb, 0x96, 0xc3, 0x75,
	0xfa, 0x58, 0x85, 0xde, 0x0d, 0x3d, 0x31, 0xa0, 0x40, 0xfe, 0x15, 0x5d, 0xcd, 0xf1, 0x36, 0x77,
	0xaa, 0x4f, 0x9b, 0x4a, 0x20, 0xe4, 0x18, 0x14, 0x99, 0xac, 0x6c, 0x7b, 0x8f, 0x56, 0xbd, 0x43,
	0x7a, 0xf5, 0xf1, 0xa9, 0x43, 0x2f, 0x96, 0x0c, 0x2b, 0x30, 0xec, 0x7f, 0x2d, 0x18, 0x99, 0x2f,
	0x18, 0xf9, 0x59, 0x30, 0x32, 0x5b, 0xb2, 0xda, 0x7c, 0xc9, 0x6a, 0xdf, 0x4b, 0x56, 0x7b, 0x6b,
	0x96, 0x1c, 0xcb, 0xfe, 0xe6, 0x8f, 0x70, 0x9a, 0x41, 0x1e, 0xee, 0xd9, 0x37, 0xba, 0xff, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x1e, 0xb8, 0xc4, 0xdf, 0xc9, 0x01, 0x00, 0x00,
}

func (m *Boundary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Boundary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Boundary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlocksPerGeneration != 0 {
		i = encodeVarintBoundary(dAtA, i, uint64(m.BlocksPerGeneration))
		i--
		dAtA[i] = 0x10
	}
	if m.TxLimit != 0 {
		i = encodeVarintBoundary(dAtA, i, uint64(m.TxLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LimitPerAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitPerAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitPerAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestUpdateBlock != 0 {
		i = encodeVarintBoundary(dAtA, i, uint64(m.LatestUpdateBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.ReledegateCount != 0 {
		i = encodeVarintBoundary(dAtA, i, uint64(m.ReledegateCount))
		i--
		dAtA[i] = 0x10
	}
	if m.DelegateCount != 0 {
		i = encodeVarintBoundary(dAtA, i, uint64(m.DelegateCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBoundary(dAtA []byte, offset int, v uint64) int {
	offset -= sovBoundary(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Boundary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxLimit != 0 {
		n += 1 + sovBoundary(uint64(m.TxLimit))
	}
	if m.BlocksPerGeneration != 0 {
		n += 1 + sovBoundary(uint64(m.BlocksPerGeneration))
	}
	return n
}

func (m *LimitPerAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegateCount != 0 {
		n += 1 + sovBoundary(uint64(m.DelegateCount))
	}
	if m.ReledegateCount != 0 {
		n += 1 + sovBoundary(uint64(m.ReledegateCount))
	}
	if m.LatestUpdateBlock != 0 {
		n += 1 + sovBoundary(uint64(m.LatestUpdateBlock))
	}
	return n
}

func sovBoundary(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBoundary(x uint64) (n int) {
	return sovBoundary(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Boundary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoundary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Boundary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Boundary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxLimit", wireType)
			}
			m.TxLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerGeneration", wireType)
			}
			m.BlocksPerGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerGeneration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBoundary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoundary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitPerAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoundary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitPerAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitPerAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateCount", wireType)
			}
			m.DelegateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegateCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReledegateCount", wireType)
			}
			m.ReledegateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReledegateCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestUpdateBlock", wireType)
			}
			m.LatestUpdateBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestUpdateBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBoundary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoundary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBoundary(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBoundary
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBoundary
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBoundary
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBoundary
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBoundary        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBoundary          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBoundary = fmt.Errorf("proto: unexpected end of group")
)
